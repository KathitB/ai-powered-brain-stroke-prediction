{"ast":null,"code":"var _jsxFileName = \"C:\\\\COLLEGE\\\\stroke--prediction-final\\\\frontend\\\\src\\\\components\\\\UploadCTScan.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction UploadCTScan() {\n  _s();\n  const [file, setFile] = useState(null);\n  const [result, setResult] = useState(null);\n  const [error, setError] = useState(null);\n  const handleUpload = async () => {\n    if (!file) {\n      alert(\"Please upload a CT scan image.\");\n      return;\n    }\n    const formData = new FormData();\n    formData.append(\"image\", file); // Ensure key matches backend\n\n    try {\n      const response = await axios.post(\"http://127.0.0.1:5000/predict-image\", formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      });\n      if (response.data.error) {\n        setError(response.data.error);\n        setResult(null);\n      } else {\n        setResult(response.data);\n        setError(null);\n      }\n    } catch (err) {\n      setError(\"Error processing the image.\");\n      setResult(null);\n      console.error(\"API Error:\", err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Upload CT Scan\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"image/*\",\n      onChange: e => setFile(e.target.files[0])\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUpload,\n      children: \"Predict\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 17\n    }, this), result && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Prediction: \", result.prediction, \" (Confidence: \", result.confidence !== null ? result.confidence.toFixed(2) : \"N/A\", \")\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n_s(UploadCTScan, \"JbBSffogLeqEcIsbJL/zgmT+scA=\");\n_c = UploadCTScan;\nexport default UploadCTScan;\nvar _c;\n$RefreshReg$(_c, \"UploadCTScan\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","UploadCTScan","_s","file","setFile","result","setResult","error","setError","handleUpload","alert","formData","FormData","append","response","post","headers","data","err","console","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","e","target","files","onClick","style","color","prediction","confidence","toFixed","_c","$RefreshReg$"],"sources":["C:/COLLEGE/stroke--prediction-final/frontend/src/components/UploadCTScan.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nfunction UploadCTScan() {\r\n  const [file, setFile] = useState(null);\r\n  const [result, setResult] = useState(null);\r\n  const [error, setError] = useState(null);\r\n\r\n  const handleUpload = async () => {\r\n    if (!file) {\r\n      alert(\"Please upload a CT scan image.\");\r\n      return;\r\n    }\r\n\r\n    const formData = new FormData();\r\n    formData.append(\"image\", file); // Ensure key matches backend\r\n\r\n    try {\r\n      const response = await axios.post(\"http://127.0.0.1:5000/predict-image\", formData, {\r\n        headers: { \"Content-Type\": \"multipart/form-data\" },\r\n      });\r\n\r\n      if (response.data.error) {\r\n        setError(response.data.error);\r\n        setResult(null);\r\n      } else {\r\n        setResult(response.data);\r\n        setError(null);\r\n      }\r\n    } catch (err) {\r\n      setError(\"Error processing the image.\");\r\n      setResult(null);\r\n      console.error(\"API Error:\", err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Upload CT Scan</h2>\r\n      <input type=\"file\" accept=\"image/*\" onChange={(e) => setFile(e.target.files[0])} />\r\n      <button onClick={handleUpload}>Predict</button>\r\n\r\n      {error && <p style={{ color: \"red\" }}>Error: {error}</p>}\r\n      {result && (\r\n        <p>\r\n          Prediction: {result.prediction} (Confidence: {result.confidence !== null ? result.confidence.toFixed(2) : \"N/A\"})\r\n        </p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UploadCTScan;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}